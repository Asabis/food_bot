import logging
import os
from io import BytesIO
from datetime import datetime, timedelta
from typing import List, Tuple, Optional, Dict
from dataclasses import dataclass

from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    ContextTypes,
)
from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer, PageBreak, HRFlowable
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from PIL import Image
from reportlab.lib.units import mm
from reportlab.platypus import BaseDocTemplate, Frame, PageTemplate

from database import add_entry, get_entries, get_entries_for_period
from config import TELEGRAM_BOT_TOKEN, FONT_PATH
from constants import ConversationState, NUTRIENT_LIMITS, MESSAGES, NUTRIENT_EMOJI, MEAL_TIMES
from nutrition_analyzer import NutritionAnalyzer, NutritionRecommendations

import pytz

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ—Å–∫–æ–≤—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
MOSCOW_TZ = pytz.timezone('Europe/Moscow')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.DEBUG
)
logger = logging.getLogger('bot')

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SET_PROTEIN, SET_VEGETABLES, SET_FATS, SET_FRUITS, SET_DAIRY, SET_GRAINS = range(6)

def register_cyrillic_font():
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —à—Ä–∏—Ñ—Ç, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π –∫–∏—Ä–∏–ª–ª–∏—Ü—É.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –∏–Ω–∞—á–µ False.
    """
    if not os.path.exists(FONT_PATH):
        logger.error(f"–®—Ä–∏—Ñ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {FONT_PATH}")
        return False

    try:
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—ã—á–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞
        pdfmetrics.registerFont(TTFont('CustomCyrillicFont', FONT_PATH))

        # –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∂–∏—Ä–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞
        bold_font_path = FONT_PATH.replace('.ttf', '-Bold.ttf')  # –ü—Ä–∏–º–µ—Ä, –∏–∑–º–µ–Ω–∏—Ç–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if os.path.exists(bold_font_path):
            pdfmetrics.registerFont(TTFont('CustomCyrillicFont-Bold', bold_font_path))
            logger.info("–ñ–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        else:
            # –ï—Å–ª–∏ –∂–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π
            pdfmetrics.registerFont(TTFont('CustomCyrillicFont-Bold', FONT_PATH))
            logger.warning("–ñ–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–π —à—Ä–∏—Ñ—Ç –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.")

        logger.info("–®—Ä–∏—Ñ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —à—Ä–∏—Ñ—Ç–∞: {e}")
        return False

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏.
    """
    logger.debug("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ /start")
    user = update.effective_user
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = [
        [KeyboardButton('/add'), KeyboardButton('/view')],
        [KeyboardButton('/stats'), KeyboardButton('/set_norms')],
        [KeyboardButton('/reminders'), KeyboardButton('/cancel')]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(MESSAGES['welcome'], reply_markup=reply_markup)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–∞—á–∞–ª –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º.")

async def add_entry_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –æ –ø—Ä–∏—ë–º–µ –ø–∏—â–∏.
    –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –ø—Ä–∏—ë–º –ø–∏—â–∏ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.
    """
    # –†–∞–∑–±–∏–≤–∞–µ–º MEAL_TIMES –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 2 —ç–ª–µ–º–µ–Ω—Ç–∞
    reply_keyboard = [MEAL_TIMES[i:i + 2] for i in range(0, len(MEAL_TIMES), 2)]
    await update.message.reply_text(
        MESSAGES['choose_meal'],
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard,
            one_time_keyboard=True,
            resize_keyboard=True
        )
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏.")
    return ConversationState.CHOOSE_MEAL.value

async def choose_meal(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    """
    meal_time = update.message.text
    if meal_time not in MEAL_TIMES:
        await update.message.reply_text(MESSAGES['invalid_meal'])
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –≤—ã–±—Ä–∞–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–∏—ë–º –ø–∏—â–∏: {meal_time}")
        return ConversationState.CHOOSE_MEAL.value

    context.user_data['meal_time'] = meal_time
    context.user_data['current_state'] = ConversationState.UPLOAD_PHOTO.value
    await update.message.reply_text(
        MESSAGES['send_photo'],
        reply_markup=ReplyKeyboardRemove()
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –≤—ã–±—Ä–∞–ª –ø—Ä–∏—ë–º –ø–∏—â–∏: {meal_time}")
    return ConversationState.UPLOAD_PHOTO.value

async def upload_photos(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.
    """
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /done
    if update.message.text and update.message.text.lower() == '/done':
        context.user_data['current_state'] = ConversationState.ENTER_PROTEIN.value
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ë–µ–ª–∫–æ–≤ (–≤ –ø–æ—Ä—Ü–∏—è—Ö):")
        return ConversationState.ENTER_PROTEIN.value

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    elif update.message.photo:
        photo = update.message.photo[-1]
        try:
            file = await photo.get_file()
            file_bytes = BytesIO()
            await file.download_to_memory(out=file_bytes)
            file_bytes.seek(0)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return ConversationState.UPLOAD_PHOTO.value

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ
        user_id = update.effective_user.id
        timestamp = datetime.now(MOSCOW_TZ).strftime("%Y%m%d%H%M%S")
        image_path = f"images/{user_id}_{timestamp}.jpg"
        try:
            os.makedirs(os.path.dirname(image_path), exist_ok=True)
            with open(image_path, 'wb') as f:
                f.write(file_bytes.read())
            context.user_data.setdefault('image_paths', []).append(image_path)
            logger.info(f"–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ø–æ –ø—É—Ç–∏: {image_path}")
            await update.message.reply_text(
                "üì∑ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /done, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å."
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.")
            return ConversationState.UPLOAD_PHOTO.value

        return ConversationState.UPLOAD_PHOTO.value

    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /done, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
        return ConversationState.UPLOAD_PHOTO.value

class NutrientInputHandler:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Ä—Ü–∏–π –ø–∏—â–µ–≤—ã—Ö –≥—Ä—É–ø–ø.
    """
    def __init__(self):
        self.nutrients = {
            ConversationState.ENTER_PROTEIN: ('protein', "–ë–µ–ª–∫–æ–≤"),
            ConversationState.ENTER_VEGETABLES: ('vegetables', "–û–≤–æ—â–µ–π"),
            ConversationState.ENTER_FATS: ('fats', "–ñ–∏—Ä–æ–≤"),
            ConversationState.ENTER_FRUITS: ('fruits', "–§—Ä—É–∫—Ç–æ–≤"),
            ConversationState.ENTER_DAIRY: ('dairy', "–ú–æ–ª–æ—á–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤"),
            ConversationState.ENTER_GRAINS: ('grains', "–ó–ª–∞–∫–æ–≤")
        }

    def validate_nutrient(self, value: str, nutrient_type: str) -> Tuple[bool, Optional[int], Optional[str]]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–∏—â–µ–≤–æ–π –≥—Ä—É–ø–ø—ã.
        """
        try:
            value = int(value)
            min_val, max_val = NUTRIENT_LIMITS[nutrient_type]
            
            if not (min_val <= value <= max_val):
                return False, None, f"–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–∂–¥—É {min_val} –∏ {max_val} –ø–æ—Ä—Ü–∏–π"
                
            return True, value, None
        except ValueError:
            return False, None, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ"

    async def handle_input(
        self, 
        update: Update, 
        context: ContextTypes.DEFAULT_TYPE, 
    ) -> int:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É.
        """
        current_state = ConversationState(context.user_data['current_state'])
        nutrient_key, nutrient_name = self.nutrients[current_state]
        
        is_valid, value, error_message = self.validate_nutrient(
            update.message.text, 
            nutrient_key
        )
        
        if not is_valid:
            await update.message.reply_text(f"{error_message} –¥–ª—è {nutrient_name} (–ø–æ—Ä—Ü–∏–π):")
            return current_state.value
            
        context.user_data[nutrient_key] = value
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –≤–≤—ë–ª {nutrient_name}: {value} –ø–æ—Ä—Ü–∏–π")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        states = list(self.nutrients.keys())
        current_idx = states.index(current_state)
        
        if current_idx == len(states) - 1:
            # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π nutrient, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å
            await self._save_entry(update, context)
            return ConversationHandler.END
            
        # –ò–Ω–∞—á–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É nutrient
        next_state = states[current_idx + 1]
        context.user_data['current_state'] = next_state.value
        _, next_nutrient_name = self.nutrients[next_state]
        await update.message.reply_text(
            MESSAGES['enter_amount'].format(nutrient_name=next_nutrient_name)
        )
        return next_state.value

    async def _save_entry(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö.
        """
        user_id = update.effective_user.id
        date = datetime.now(MOSCOW_TZ).strftime("%Y-%m-%d")
        timestamp = datetime.now(MOSCOW_TZ).strftime("%Y-%m-%d %H:%M:%S")

        image_paths = context.user_data.get('image_paths', [])
        
        add_entry(
            user_id=user_id,
            date=date,
            meal_time=context.user_data['meal_time'],
            protein=context.user_data.get('protein', 0),
            vegetables=context.user_data.get('vegetables', 0),
            fats=context.user_data.get('fats', 0),
            fruits=context.user_data.get('fruits', 0),
            dairy=context.user_data.get('dairy', 0),
            grains=context.user_data.get('grains', 0),
            image_paths=image_paths,
            timestamp=timestamp
        )

        await update.message.reply_text(
            MESSAGES['entry_added'].format(meal_time=context.user_data['meal_time'])
        )
        logger.info(f"–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")

        # –û—á–∏—Å—Ç–∫–∞ image_paths –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—Ö–æ–¥–∞
        context.user_data.pop('image_paths', None)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏.
    """
    await update.message.reply_text(
        "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove()
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –æ—Ç–º–µ–Ω–∏–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏.")
    return ConversationHandler.END

@dataclass
class DiaryEntry:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞.
    """
    meal_time: str
    protein: int
    vegetables: int
    fats: int
    fruits: int
    dairy: int
    grains: int
    image_paths: List[str]
    timestamp: datetime

class PDFReportGenerator:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF-–æ—Ç—á—ë—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø–∏—Å–µ–π –¥–Ω–µ–≤–Ω–∏–∫–∞.
    """
    def __init__(self, user_id: int, date: str, user_norms: Dict[str, int] = None):
        self.user_id = user_id
        self.date = date
        self.pdf_path = f"reports/{user_id}_{date}.pdf"
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —à—Ä–∏—Ñ—Ç –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º —Å—Ç–∏–ª–µ–π
        if not register_cyrillic_font():
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —à—Ä–∏—Ñ—Ç–∞.")
        self.styles = self._create_styles()
        self.nutrition_analyzer = NutritionAnalyzer(user_norms)

    def _create_styles(self) -> dict:
        """
        –°–æ–∑–¥–∞—ë—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∏–ª–∏ –¥–ª—è PDF-–¥–æ–∫—É–º–µ–Ω—Ç–∞.
        """
        styles = getSampleStyleSheet()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á—ë—Ç–∞
        styles.add(ParagraphStyle(
            name='CenterTitle',
            alignment=1,
            fontName='CustomCyrillicFont-Bold',
            fontSize=26,
            spaceAfter=20,
            textColor=colors.HexColor('#1F618D'),  # –ë–æ–ª–µ–µ –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–π —Å–∏–Ω–∏–π
        ))
        
        # –ù–æ—Ä–º—ã –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è
        styles.add(ParagraphStyle(
            name='Norms',
            alignment=0,  # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ –ª–µ–≤–æ–º—É –∫—Ä–∞—é
            fontName='CustomCyrillicFont-Bold',
            fontSize=14,
            spaceAfter=10,
            textColor=colors.HexColor('#2C3E50'),  # –¢—ë–º–Ω–æ-—Å–∏–Ω–∏–π
            wordWrap='CJK'  # –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–≤–æ–π—Å—Ç–≤–æ –ø–µ—Ä–µ–Ω–æ—Å–∞
        ))
        
        # –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∏
        styles.add(ParagraphStyle(
            name='SubTitle',
            fontName='CustomCyrillicFont-Bold',
            fontSize=16,
            spaceAfter=10,
            textColor=colors.HexColor('#34495E'),  # –°–µ—Ä–æ–≤–∞—Ç–æ-—Å–∏–Ω–∏–π
            wordWrap='CJK'  # –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–≤–æ–π—Å—Ç–≤–æ –ø–µ—Ä–µ–Ω–æ—Å–∞
        ))
        
        # –°—Ç–∏–ª—å –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –≤ —è—á–µ–π–∫–∞—Ö —Ç–∞–±–ª–∏—Ü—ã
        styles.add(ParagraphStyle(
            name='TableCell',
            fontName='CustomCyrillicFont',
            fontSize=10,
            alignment=0,  # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ –ª–µ–≤–æ–º—É –∫—Ä–∞—é
            leading=12,
            wordWrap='CJK',
            splitLongWords=True,
            hyphenationLang='ru'  # –Ø–∑—ã–∫ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å–ª–æ–≤
        ))
        
        # –°—Ç–∏–ª—å –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ç–∞–±–ª–∏—Ü—ã
        styles.add(ParagraphStyle(
            name='TableHeader',
            fontName='CustomCyrillicFont-Bold',
            fontSize=11,
            alignment=1,  # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
            textColor=colors.white,
            wordWrap='CJK'  # –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–≤–æ–π—Å—Ç–≤–æ –ø–µ—Ä–µ–Ω–æ—Å–∞
        ))
        
        # –°—Ç–∏–ª—å –¥–ª—è –ø–æ–¥–ø–∏—Å–µ–π –∫ —Ñ–æ—Ç–æ
        styles.add(ParagraphStyle(
            name='PhotoCaption',
            fontName='CustomCyrillicFont',
            fontSize=12,
            alignment=1,  # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
            spaceAfter=5,
            textColor=colors.HexColor('#2980B9'),  # –°–∏–Ω–∏–π
            wordWrap='CJK'  # –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–≤–æ–π—Å—Ç–≤–æ –ø–µ—Ä–µ–Ω–æ—Å–∞
        ))
        
        # –°—Ç–∏–ª—å –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        styles.add(ParagraphStyle(
            name='Recommendation',
            fontName='CustomCyrillicFont',
            fontSize=12,
            spaceAfter=10,
            leftIndent=20,
            bulletIndent=10,
            textColor=colors.HexColor('#7F8C8D'),  # –°–µ—Ä—ã–π
            wordWrap='CJK'  # –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–≤–æ–π—Å—Ç–≤–æ –ø–µ—Ä–µ–Ω–æ—Å–∞
        ))
        
        return styles

    def _create_table_style(self) -> TableStyle:
        """
        –°–æ–∑–¥–∞—ë—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∏–ª—å –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –≤ –æ—Ç—á—ë—Ç–µ.
        """
        return TableStyle([
            # –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            ('GRID', (0, 0), (-1, -1), 0.5, colors.HexColor('#BDC3C7')),
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#34495E')),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
            # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –∏ —à—Ä–∏—Ñ—Ç—ã
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            ('FONTNAME', (0, 0), (-1, -1), 'CustomCyrillicFont'),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            # –û—Ç—Å—Ç—É–ø—ã
            ('LEFTPADDING', (0, 0), (-1, -1), 6),
            ('RIGHTPADDING', (0, 0), (-1, -1), 6),
            ('TOPPADDING', (0, 0), (-1, -1), 8),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 8),
            # –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –¥–ª—è —á—ë—Ç–Ω—ã—Ö —Å—Ç—Ä–æ–∫
            ('BACKGROUND', (0, 1), (-1, -1), colors.HexColor('#ECF0F1')),
            ('BACKGROUND', (0, 2), (-1, -1), colors.white),
        ])

    def _create_table_data(self, entries: List[DiaryEntry]) -> Tuple[List[List[str]], dict]:
        """
        –°–æ–∑–¥–∞—ë—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –∏ —Å—á–∏—Ç–∞–µ—Ç –∏—Ç–æ–≥–∏ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è.
        """
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
        data = [[
            Paragraph('–ü—Ä–∏—ë–º –ø–∏—â–∏', self.styles['TableHeader']),
            Paragraph('–ë–µ–ª–∫–∏', self.styles['TableHeader']),
            Paragraph('–û–≤–æ—â–∏', self.styles['TableHeader']),
            Paragraph('–ñ–∏—Ä—ã', self.styles['TableHeader']),
            Paragraph('–§—Ä—É–∫—Ç—ã', self.styles['TableHeader']),
            Paragraph('–ú–æ–ª–æ—á–∫–∞', self.styles['TableHeader']),
            Paragraph('–ó–ª–∞–∫–∏', self.styles['TableHeader']),
            Paragraph('–í—Ä–µ–º—è', self.styles['TableHeader']),
        ]]
        
        totals = {
            'protein': 0, 'vegetables': 0, 'fats': 0,
            'fruits': 0, 'dairy': 0, 'grains': 0
        }
        
        for entry in entries:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
            time_str = entry.timestamp.astimezone(MOSCOW_TZ).strftime("%H:%M")
            data.append([
                Paragraph(entry.meal_time, self.styles['TableCell']),
                Paragraph(str(entry.protein), self.styles['TableCell']),
                Paragraph(str(entry.vegetables), self.styles['TableCell']),
                Paragraph(str(entry.fats), self.styles['TableCell']),
                Paragraph(str(entry.fruits), self.styles['TableCell']),
                Paragraph(str(entry.dairy), self.styles['TableCell']),
                Paragraph(str(entry.grains), self.styles['TableCell']),
                Paragraph(time_str, self.styles['TableCell']),
            ])
            
            # –°—É–º–º–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
            totals['protein'] += entry.protein
            totals['vegetables'] += entry.vegetables
            totals['fats'] += entry.fats
            totals['fruits'] += entry.fruits
            totals['dairy'] += entry.dairy
            totals['grains'] += entry.grains
            
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏—Ç–æ–≥–∞–º–∏
        data.append([
            Paragraph('–°—É–º–º–∞', self.styles['TableHeader']),
            Paragraph(str(totals['protein']), self.styles['TableHeader']),
            Paragraph(str(totals['vegetables']), self.styles['TableHeader']),
            Paragraph(str(totals['fats']), self.styles['TableHeader']),
            Paragraph(str(totals['fruits']), self.styles['TableHeader']),
            Paragraph(str(totals['dairy']), self.styles['TableHeader']),
            Paragraph(str(totals['grains']), self.styles['TableHeader']),
            ''
        ])
        
        return data, totals

    def _create_recommendations(self, totals: dict, user_norms: Dict[str, int]) -> List[Paragraph]:
        """
        –°–æ–∑–¥–∞—ë—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è.
        """
        recommendations = self.nutrition_analyzer.analyze_daily_intake(totals)
        elements = []
        elements.append(Paragraph("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:", self.styles['SubTitle']))
        elements.append(Spacer(1, 10))
        
        for rec in recommendations:
            elements.append(Paragraph(f"‚Ä¢ {rec}", self.styles['Recommendation']))
            elements.append(Spacer(1, 5))
            
        return elements

    def _add_image(self, meal_time: str, image_path: str, timestamp: datetime) -> List:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –æ—Ç—á—ë—Ç —Å –ø–æ–¥–ø–∏—Å—å—é –∫ –Ω–µ–º—É.
        """
        elements = []
        try:
            img = Image.open(image_path)
            img_width, img_height = img.size
            aspect = img_height / float(img_width)
            img_width = 400  # –®–∏—Ä–∏–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            img_height = img_width * aspect

            img.thumbnail((img_width, img_height))
            img_io = BytesIO()
            img.save(img_io, format='PNG')
            img_io.seek(0)

            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
            time_str = timestamp.astimezone(MOSCOW_TZ).strftime("%H:%M")

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ —Å –≤—Ä–µ–º–µ–Ω–µ–º
            caption_text = f"üì∑ {meal_time} –≤ {time_str}"
            elements.append(Paragraph(caption_text, self.styles['PhotoCaption']))
            elements.append(Spacer(1, 5))

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            from reportlab.platypus import Image as PlatypusImage
            platypus_image = PlatypusImage(img_io, width=img_width, height=img_height)
            elements.append(platypus_image)
            elements.append(PageBreak())

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

        return elements

    async def generate(self, entries: List[DiaryEntry]) -> Optional[str]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç PDF-–æ—Ç—á—ë—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É.
        """
        try:
            os.makedirs(os.path.dirname(self.pdf_path), exist_ok=True)
            
            # –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –Ω–æ–º–µ—Ä–∞–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü
            doc = BaseDocTemplate(
                self.pdf_path,
                pagesize=A4,
                rightMargin=20,
                leftMargin=20,
                topMargin=20,
                bottomMargin=20
            )

            frame = Frame(doc.leftMargin, doc.bottomMargin, doc.width, doc.height, id='normal')
            template = PageTemplate(id='test', frames=frame, onPage=self._add_page_number)
            doc.addPageTemplates([template])

            elements = []

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á—ë—Ç–∞
            title = Paragraph(f"–ü–∏—â–µ–≤–æ–π –¥–Ω–µ–≤–Ω–∏–∫ –∑–∞ {self.date}", self.styles['CenterTitle'])
            elements.append(title)
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–æ—Ä–º –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤
            if self.nutrition_analyzer.recommendations:
                norms_text = "–í–∞—à–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–æ—Ä–º—ã –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è:\n"
                norms_text += f"‚Ä¢ –ë–µ–ª–∫–∏: {self.nutrition_analyzer.recommendations.protein_daily} –ø–æ—Ä—Ü–∏–π\n"
                norms_text += f"‚Ä¢ –û–≤–æ—â–∏: {self.nutrition_analyzer.recommendations.vegetables_daily} –ø–æ—Ä—Ü–∏–π\n"
                norms_text += f"‚Ä¢ –ñ–∏—Ä—ã: {self.nutrition_analyzer.recommendations.fats_daily} –ø–æ—Ä—Ü–∏–π\n"
                norms_text += f"‚Ä¢ –§—Ä—É–∫—Ç—ã: {self.nutrition_analyzer.recommendations.fruits_daily} –ø–æ—Ä—Ü–∏–π\n"
                norms_text += f"‚Ä¢ –ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã: {self.nutrition_analyzer.recommendations.dairy_daily} –ø–æ—Ä—Ü–∏–π\n"
                norms_text += f"‚Ä¢ –ó–ª–∞–∫–∏: {self.nutrition_analyzer.recommendations.grains_daily} –ø–æ—Ä—Ü–∏–π\n"
            else:
                norms_text = "–í–∞—à–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–æ—Ä–º—ã –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è:\n"
                norms_text += "‚Ä¢ –ë–µ–ª–∫–∏: ? –ø–æ—Ä—Ü–∏–π\n"
                norms_text += "‚Ä¢ –û–≤–æ—â–∏: ? –ø–æ—Ä—Ü–∏–π\n"
                norms_text += "‚Ä¢ –ñ–∏—Ä—ã: ? –ø–æ—Ä—Ü–∏–π\n"
                norms_text += "‚Ä¢ –§—Ä—É–∫—Ç—ã: ? –ø–æ—Ä—Ü–∏–π\n"
                norms_text += "‚Ä¢ –ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã: ? –ø–æ—Ä—Ü–∏–π\n"
                norms_text += "‚Ä¢ –ó–ª–∞–∫–∏: ? –ø–æ—Ä—Ü–∏–π\n"
            
            norms = Paragraph(norms_text, self.styles['Norms'])
            elements.append(norms)
            elements.append(Spacer(1, 10))

            # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É
            table_data, totals = self._create_table_data(entries)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —à–∏—Ä–∏–Ω—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            page_width = A4[0] - doc.leftMargin - doc.rightMargin

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
            col_ratios = [1.5, 1, 1, 1, 1, 1.2, 1, 1.2]
            total_ratio = sum(col_ratios)
            col_widths = [(ratio / total_ratio) * page_width for ratio in col_ratios]

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤
            min_col_width = 100  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–∞
            col_widths = [max(width, min_col_width) for width in col_widths]
            
            table = Table(table_data, colWidths=col_widths)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª—å –∫ —Ç–∞–±–ª–∏—Ü–µ
            table.setStyle(self._create_table_style())

            elements.append(table)
            elements.append(Spacer(1, 20))

            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω—É—é –ª–∏–Ω–∏—é
            elements.append(HRFlowable(width="100%", thickness=1, color=colors.HexColor('#BDC3C7')))
            elements.append(Spacer(1, 10))

            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommendations_elements = self._create_recommendations(totals, self.nutrition_analyzer.recommendations.__dict__ if self.nutrition_analyzer.recommendations else None)
            elements.extend(recommendations_elements)

            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (–ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É)
            for entry in entries:
                if entry.image_paths:
                    for image_path in entry.image_paths:
                        if os.path.exists(image_path):
                            elements.extend(self._add_image(entry.meal_time, image_path, entry.timestamp))

            doc.build(elements)
            logger.info(f"PDF –æ—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {self.pdf_path}")
            return self.pdf_path

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF: {e}")
            return None

    def _add_page_number(self, canvas, doc):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤–Ω–∏–∑—É –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
        """
        page_num = canvas.getPageNumber()
        text = f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num}"
        canvas.setFont('CustomCyrillicFont', 9)
        canvas.drawCentredString(A4[0] / 2, 15 * mm, text)

def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –∏ –∏–ΩÔøΩÔøΩ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏."""
    application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))

    # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ NutrientInputHandler
    nutrient_input_handler = NutrientInputHandler()

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è ConversationHandler
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('add', add_entry_start)],
        states={
            ConversationState.CHOOSE_MEAL.value: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, choose_meal)
            ],
            ConversationState.UPLOAD_PHOTO.value: [
                MessageHandler(
                    filters.PHOTO | filters.Regex('^/done$') | (filters.TEXT & ~filters.COMMAND),
                    upload_photos
                )
            ],
            ConversationState.ENTER_PROTEIN.value: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, nutrient_input_handler.handle_input)
            ],
            ConversationState.ENTER_VEGETABLES.value: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, nutrient_input_handler.handle_input)
            ],
            ConversationState.ENTER_FATS.value: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, nutrient_input_handler.handle_input)
            ],
            ConversationState.ENTER_FRUITS.value: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, nutrient_input_handler.handle_input)
            ],
            ConversationState.ENTER_DAIRY.value: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, nutrient_input_handler.handle_input)
            ],
            ConversationState.ENTER_GRAINS.value: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, nutrient_input_handler.handle_input)
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    application.add_handler(conv_handler)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()